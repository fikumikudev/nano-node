#!/usr/bin/env python3

import requests
import argparse
from binascii import unhexlify
from base64 import b32decode
from binascii import hexlify

parser = argparse.ArgumentParser(description="Generate bootstrap representative weight file.")
parser.add_argument("--output", type=str, help="output weight file", default="test_weights.txt")
parser.add_argument("--rpc", help="node rpc host:port", default="http://[::1]:7076")
parser.add_argument("--limit", help="percentage of the active supply represented", default=0.99)
parser.add_argument(
    "--cutoff",
    help="stop using bootstrap reps this many blocks before the current block height",
    default=250000,
    type=int,
)

args = parser.parse_args()


def get_representatives():
    r = requests.post(args.rpc, data='{"action":"representatives"}')
    p = r.json()
    # Convert string weights to ints
    reps = {acc: int(p["representatives"][acc]) for acc in p["representatives"]}
    return reps


def get_block_height():
    r = requests.post(args.rpc, data='{"action":"block_count"}')
    p = r.json()
    block_height = int(p["cemented"])
    return block_height


reps = get_representatives()
print(f"Found representatives: {len(reps)}")

# reps = []
# for acc in p["representatives"]:
#     reps.append({"account": acc, "weight": int(p["representatives"][acc])})

# r = requests.post(args.rpc, data='{"action":"block_count"}')
# p = r.json()
# block_height = max(0, int(p["cemented"]) - args.cutoff)

reps.sort(key=lambda x: x["weight"], reverse=True)

block_height = get_block_height()
print(f"Node block height: {block_height}")

cutoff_height = max(0, block_height - args.cutoff)
print(f"Cutoff block height: {block_height}")

supplymax = int(0)
for rep in reps:
    supplymax += rep["weight"]

supplymax /= int("1000000000000000000000000000000")
supplymax = int(supplymax * float(args.limit))
supplymax *= int("1000000000000000000000000000000")

with open(args.output, "w") as of:
    # Write the C++ namespace and vector header
    of.write("#pragma once\n\n")
    of.write("#include <string>\n#include <vector>\n\n")
    of.write("namespace nano::weights\n{\n")
    of.write("std::vector<std::pair<std::string, std::string>> preconfigured_weights_live = {\n")

    total = int(0)
    count = 0
    for rep in reps:
        if rep["weight"] == 0:
            break
        # Generate account and weight in the required C++ format
        acc = rep["account"]
        weight = str(rep["weight"])
        of.write(f'\t{{ "{acc}", "{weight}" }},\n')
        total += rep["weight"]
        count += 1
        print(rep["account"] + ": " + str(rep["weight"]))
        if total >= supplymax:
            break

    # Remove the last comma and newline to properly format the C++ code
    of.seek(of.tell() - 2, 0)
    of.write("\n};\n")

    # Write the block height
    of.write(f"uint64_t max_blocks_live = {block_height};\n")
    of.write("}\n")

print(f"Wrote {count} representative weights to {args.output}")
